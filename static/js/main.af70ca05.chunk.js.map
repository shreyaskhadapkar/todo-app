{"version":3,"sources":["Addtask.js","Task.js","App.js","serviceWorker.js","index.js"],"names":["Addtask","state","ToDo","id","Change","e","setState","target","value","Math","random","Submit","preventDefault","document","getElementById","alert","props","addTask","className","onSubmit","this","placeholder","onChange","type","Component","Task","todo","del","length","List","map","task","key","onClick","App","Add","newTask","Del","newList","filter","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAuCeA,E,2MApCXC,MAAQ,CACJC,KAAM,KACNC,GAAI,M,EAERC,OAAS,SAAAC,GACL,EAAKC,SACD,CACIJ,KAAMG,EAAEE,OAAOC,MACfL,GAAqB,GAAhBM,KAAKC,Y,EAItBC,OAAS,SAAAN,GACLA,EAAEO,iBACoC,KAAnCC,SAASC,eAAe,SACvBC,MAAM,+BAINF,SAASC,eAAe,SAASN,MAAQ,GACzC,EAAKQ,MAAMC,QAAQ,EAAKhB,S,wEAI5B,OACI,0BAAMiB,UAAU,mBAAmBC,SAAUC,KAAKT,QAC9C,2DACA,yBAAKO,UAAU,oCACX,2BAAQA,UAAU,uBAAuBG,YAAY,iBAAiBlB,GAAG,QAAQmB,SAAaF,KAAKhB,UAEvG,4BAAQc,UAAY,6CAA6CK,KAAO,UAAxE,kB,GA/BMC,aCgBPC,EAhBF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,KAAKC,EAAS,EAATA,IAChB,GAAmB,IAAhBD,EAAKE,OACJ,IAAIC,EAAOH,EAAKI,KAAI,SAAAC,GAChB,OACI,yBAAKb,UAAU,kEAAkEc,IAAOD,EAAK5B,GAAI8B,QAAS,WAAON,EAAII,EAAK5B,MACtH,4BAAK4B,EAAK7B,eAMtB2B,EAAO,wBAAIX,UAAU,gBAAd,kBAEX,OAAO,6BAAMW,ICoBFK,E,2MA9BbjC,MAAQ,CACNC,KAAO,I,EAGTiC,IAAM,SAAA9B,GACJ,IAAI+B,EAAO,sBAAO,EAAKnC,MAAMC,MAAlB,CAAuBG,IAClC,EAAKC,SAAS,CACZJ,KAAOkC,K,EAIXC,IAAM,SAAAhC,GACJ,IAAIiC,EAAU,EAAKrC,MAAMC,KAAKqC,QAAQ,SAAAd,GACpC,OAAOA,EAAKtB,KAAOE,KAErB,EAAKC,SAAS,CACZJ,KAAOoC,K,wEAIP,OACA,yBAAKpB,UAAU,6BACb,wBAAIA,UAAU,0BAAd,cACA,kBAAC,EAAD,CAAMQ,KAAQN,KAAKnB,MAAMC,KAAMyB,IAAOP,KAAKiB,MAC3C,kBAAC,EAAD,CAASpB,QAAWG,KAAKe,W,GAzBfX,aCQEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASC,eAAe,SD6H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.af70ca05.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Addtask extends Component{\r\n    state = {\r\n        ToDo: null,\r\n        id: null\r\n    };\r\n    Change = e => {\r\n        this.setState(\r\n            {\r\n                ToDo: e.target.value,\r\n                id : Math.random() * 10 \r\n            }\r\n        );\r\n    };\r\n    Submit = e => {\r\n        e.preventDefault();\r\n        if(document.getElementById(\"input\")===\"\"){\r\n            alert(\"You cannot add Empty To-do\");\r\n        }\r\n        else\r\n        {\r\n            document.getElementById(\"input\").value = \"\";\r\n            this.props.addTask(this.state);\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <form className=\"form-group my-4 \" onSubmit={this.Submit} >\r\n                <p>Click on any To-Do to Cancel</p>\r\n                <div className=\"input-group-lg mb-3 rounded-pill\">\r\n                    <input  className=\"form-control rounded\" placeholder=\"Create a To-do\" id=\"input\" onChange = { this.Change}/>\r\n                </div>\r\n                <button className = \"btn btn-primary btn-lg rounded float-right\" type = \"submit\">Add To-Do</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Addtask;","import React from 'react';\r\n\r\nconst Task = ({todo,del}) => {\r\n    if(todo.length !== 0) {\r\n        var List = todo.map(task => {\r\n            return (\r\n                <div className=\" list-group-item list-group-item-primary rounded-pill p-3 my-3 \" key = {task.id} onClick={() => {del(task.id)}}>\r\n                    <h3>{task.ToDo}</h3>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    else{\r\n        List = <h1 className=\"text-primary\">Nothing Left!!</h1>\r\n    }\r\n    return <div>{List}</div>\r\n};\r\n\r\nexport default Task;","import React , { Component } from 'react';\nimport Addtask from './Addtask'\nimport Task from './Task'\n\nclass App extends Component {\n  state = {\n    ToDo : []\n  };\n\n  Add = e => {\n    let newTask = [...this.state.ToDo,e];\n    this.setState({\n      ToDo : newTask\n    });\n  };\n\n  Del = e => {\n    let newList = this.state.ToDo.filter( Task => {\n      return Task.id !== e;\n    });\n    this.setState({\n      ToDo : newList\n    });\n  };\n  render(){\n      return (\n      <div className=\"App container text-center\">\n        <h1 className=\"my-4 py-4 text-primary\">To-Do List</h1>\n        <Task todo = {this.state.ToDo} del = {this.Del}/>\n        <Addtask addTask = {this.Add}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}